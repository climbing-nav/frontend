# 클라이밍 서울 앱 Frontend PRD (Product Requirements Document)

## 1. 프로젝트 개요

### 프로젝트명
클라이밍 서울 (Climbing Seoul) - Frontend Development

### 프로젝트 목표
서울 지역 클라이밍 애호가들을 위한 모바일 웹 애플리케이션의 프론트엔드 개발. 기존 아키텍처를 기반으로 누락된 컴포넌트를 구현하고, 사용자 경험을 향상시키는 것이 목표.

### 타겟 사용자
- 클라이밍 초보자부터 숙련자까지
- 서울 및 수도권 거주자
- 20-40대 클라이밍 애호가
- 모바일 우선 사용자 (393px 기준 모바일 웹앱)

### 현재 기술 스택
- **Frontend Framework**: React 19.1.0 + Vite
- **UI Library**: Material-UI 7.2.0
- **상태 관리**: Redux Toolkit 2.8.2
- **HTTP Client**: Axios 1.10.0
- **Animation**: Framer Motion 12.23.3
- **개발 환경**: Node.js, ESLint

## 2. 현재 구현 상태 분석

### 2.1 완료된 기능 ✅
#### 페이지 레벨 (4/4)
- **HomePage**: 통계, 지도 미리보기, 추천 암장 목록 - 완전 구현됨
- **CommunityPage**: 탭 네비게이션, 게시글 목록 - 완전 구현됨
- **ProfilePage**: 사용자 프로필, 메뉴 섹션 - 완전 구현됨
- **MapPage**: 기본 레이아웃 - 플레이스홀더 상태

#### 공통 컴포넌트 (3/3)
- **Header**: 검색바, 프로필 버튼 - 완전 구현됨
- **BottomNavigation**: 4개 탭 - 완전 구현됨
- **FAB**: 플로팅 액션 버튼 - 완전 구현됨

#### 상태 관리 (4/4)
- **Redux Slices**: auth, gym, community, map - 완전 구현됨
- **Custom Hooks**: useAuth, useGyms, useMap, usePosts - 완전 구현됨
- **Services**: API 서비스 레이어 - 완전 구현됨
- **Utilities**: formatters, validators, helpers - 완전 구현됨

### 2.2 미완료 기능 ❌
#### 인증 컴포넌트 (0/3)
- **LoginForm**: 디렉토리만 존재
- **RegisterForm**: 디렉토리만 존재  
- **SocialLogin**: 디렉토리만 존재

#### 암장 관련 컴포넌트 (1/3)
- **GymCard**: ✅ 완료
- **GymDetail**: 디렉토리만 존재
- **GymList**: 디렉토리만 존재

#### 커뮤니티 컴포넌트 (1/5)
- **PostCard**: ✅ 완료
- **PostForm**: 디렉토리만 존재
- **PostList**: 디렉토리만 존재
- **CommentForm**: 디렉토리만 존재
- **CommentList**: 디렉토리만 존재

#### 지도 컴포넌트 (0/3)
- **KakaoMap**: 디렉토리만 존재
- **GymMarker**: 디렉토리만 존재
- **CongestionBadge**: 디렉토리만 존재

#### 공통 컴포넌트 (0/3)
- **Loading**: 디렉토리만 존재
- **Modal**: 디렉토리만 존재
- **Footer**: 디렉토리만 존재

## 3. Frontend 개발 우선순위

### 3.1 Phase 1: 핵심 기능 완성 (High Priority)
**예상 기간: 4주**

#### 3.1.1 인증 시스템 구현
- **LoginForm 컴포넌트**
  - 이메일/비밀번호 입력 폼
  - 소셜 로그인 버튼 (Google, Kakao)
  - 폼 검증 및 에러 처리
  - 로그인 상태 관리 연동

- **RegisterForm 컴포넌트**
  - 회원가입 폼 (이메일, 비밀번호, 닉네임, 클라이밍 레벨)
  - 이메일 인증 플로우
  - 약관 동의 체크박스
  - 폼 검증 및 에러 처리

- **SocialLogin 컴포넌트**
  - Google, Kakao 소셜 로그인
  - OAuth 연동 처리
  - 에러 핸들링

- **Auth 페이지**
  - 로그인/회원가입 탭 전환
  - 반응형 디자인
  - 로딩 상태 표시

#### 3.1.2 지도 기능 구현
- **KakaoMap 컴포넌트**
  - Kakao Maps API 연동
  - 현재 위치 표시
  - 암장 마커 표시
  - 지도 클릭 이벤트 처리

- **GymMarker 컴포넌트**
  - 암장 위치 마커
  - 혼잡도 상태 표시
  - 마커 클릭 시 암장 정보 표시
  - 클러스터링 기능

- **CongestionBadge 컴포넌트**
  - 혼잡도 상태 표시 (쾌적/보통/혼잡)
  - 색상 코딩 (녹색/노랑/빨강)
  - 애니메이션 효과

#### 3.1.3 암장 상세 페이지
- **GymDetail 컴포넌트**
  - 암장 상세 정보 표시
  - 이미지 갤러리
  - 리뷰 섹션
  - 즐겨찾기 버튼
  - 길찾기 버튼

- **GymList 컴포넌트**
  - 암장 목록 표시
  - 필터링 (지역, 타입, 혼잡도)
  - 정렬 기능 (거리순, 평점순)
  - 무한 스크롤

### 3.2 Phase 2: 커뮤니티 기능 확장 (Medium Priority)
**예상 기간: 3주**

#### 3.2.1 게시글 관리
- **PostForm 컴포넌트**
  - 게시글 작성/수정 폼
  - 카테고리 선택
  - 이미지 첨부 기능
  - 태그 입력
  - 임시저장 기능

- **PostList 컴포넌트**
  - 게시글 목록 표시
  - 카테고리별 필터링
  - 검색 기능
  - 무한 스크롤
  - 좋아요/북마크 표시

#### 3.2.2 댓글 시스템
- **CommentForm 컴포넌트**
  - 댓글 작성 폼
  - 대댓글 기능
  - 이미지 첨부
  - 멘션 기능

- **CommentList 컴포넌트**
  - 댓글 목록 표시
  - 대댓글 중첩 표시
  - 좋아요/신고 기능
  - 페이지네이션

### 3.3 Phase 3: 사용자 경험 향상 (Low Priority)
**예상 기간: 2주**

#### 3.3.1 공통 컴포넌트
- **Loading 컴포넌트**
  - 스켈레톤 로딩
  - 스피너 로딩
  - 프로그레스 바
  - 페이지별 커스텀 로딩

- **Modal 컴포넌트**
  - 재사용 가능한 모달
  - 애니메이션 효과
  - 키보드 네비게이션
  - 접근성 지원

- **Footer 컴포넌트**
  - 앱 정보
  - 이용약관/개인정보처리방침
  - 고객센터 연결

#### 3.3.2 추가 기능
- **검색 기능 구현**
  - 통합 검색 (암장, 게시글)
  - 자동완성
  - 검색 기록
  - 필터 옵션

- **알림 시스템**
  - 푸시 알림
  - 인앱 알림
  - 알림 설정

## 4. 기술적 구현 요구사항

### 4.1 컴포넌트 설계 원칙
- **재사용성**: 공통 컴포넌트는 props를 통한 커스터마이징 지원
- **접근성**: WAI-ARIA 지침 준수
- **반응형**: 모바일 우선 설계 (393px 기준)
- **성능**: React.memo, useMemo, useCallback 적절히 활용

### 4.2 상태 관리
- **Redux Toolkit**: 복잡한 상태 관리
- **React Query**: 서버 상태 캐싱 (향후 도입 고려)
- **로컬 상태**: useState, useReducer 적절히 활용

### 4.3 API 연동
- **Axios**: HTTP 클라이언트
- **인터셉터**: 요청/응답 전처리
- **에러 핸들링**: 일관된 에러 처리
- **로딩 상태**: 요청별 로딩 관리

### 4.4 라우팅
- **React Router**: SPA 라우팅 구현
- **Protected Routes**: 인증 기반 라우팅
- **Code Splitting**: 페이지별 코드 분할

### 4.5 외부 API 연동
- **Kakao Maps API**: 지도 기능
- **Kakao Login API**: 소셜 로그인
- **Google Login API**: 소셜 로그인
- **위치 서비스**: Geolocation API

## 5. 품질 보증 계획

### 5.1 코드 품질
- **ESLint**: 코드 스타일 일관성
- **Prettier**: 코드 포맷팅
- **TypeScript**: 점진적 타입 적용 고려
- **Component Story**: Storybook 도입 고려

### 5.2 테스트 계획
- **Unit Test**: 컴포넌트 단위 테스트
- **Integration Test**: 페이지 레벨 테스트
- **E2E Test**: 사용자 플로우 테스트
- **테스트 도구**: Jest, React Testing Library, Cypress

### 5.3 성능 최적화
- **Code Splitting**: 페이지별 번들 분할
- **Image Optimization**: 이미지 최적화
- **Bundle Analysis**: 번들 크기 분석
- **Lazy Loading**: 지연 로딩 구현

## 6. 배포 및 운영

### 6.1 빌드 최적화
- **Vite**: 빠른 빌드 및 개발 서버
- **환경 변수**: 개발/스테이징/프로덕션 환경 분리
- **Source Map**: 디버깅을 위한 소스맵

### 6.2 모니터링
- **에러 트래킹**: Sentry 연동
- **사용자 분석**: Google Analytics
- **성능 모니터링**: Web Vitals

## 7. 개발 프로세스

### 7.1 브랜치 전략
- **main**: 프로덕션 코드
- **develop**: 개발 통합 브랜치
- **feature/***: 기능별 브랜치
- **hotfix/***: 긴급 수정 브랜치

### 7.2 커밋 컨벤션
- **feat**: 새로운 기능
- **fix**: 버그 수정
- **docs**: 문서 수정
- **style**: 코드 포맷팅
- **refactor**: 리팩토링
- **test**: 테스트 추가

### 7.3 코드 리뷰
- **PR Template**: 일관된 리뷰 양식
- **Review Checklist**: 검토 체크리스트
- **자동화**: 린트, 테스트 자동 실행

## 8. 위험 요소 및 대응 방안

### 8.1 기술적 위험
- **카카오 지도 API 제한**: 다른 지도 API 대안 준비
- **모바일 성능**: 최적화 우선순위 설정
- **브라우저 호환성**: 폴리필 및 트랜스파일링

### 8.2 일정 위험
- **API 연동 지연**: 모킹을 통한 독립적 개발
- **디자인 변경**: 컴포넌트 기반 설계로 유연성 확보
- **요구사항 변경**: 애자일 방법론 적용

## 9. 성공 지표

### 9.1 기술적 지표
- **페이지 로딩 시간**: 3초 이내
- **컴포넌트 재사용률**: 80% 이상
- **코드 커버리지**: 80% 이상
- **번들 크기**: 1MB 이하

### 9.2 사용자 경험 지표
- **사용자 만족도**: 4.5/5.0 이상
- **이탈률**: 30% 이하
- **평균 세션 시간**: 15분 이상
- **페이지 전환 시간**: 1초 이내

---

**문서 버전**: v2.0 (Frontend 전용)
**작성일**: 2025-07-14
**다음 리뷰일**: 2025-07-21
**담당자**: Frontend 개발팀